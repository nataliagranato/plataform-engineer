name: Platform Engineering CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3.29.2
        with:
          sarif_file: 'trivy-results.sarif'

  terraform-check:
    name: Terraform Validation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0
      
      - name: Terraform Format Check
        run: terraform fmt -check -recursive infrastructure/terraform/
      
      - name: Terraform Validate
        run: |
          cd infrastructure/terraform/environments/dev
          terraform init -backend=false
          terraform validate

  kubernetes-validation:
    name: Kubernetes Manifests Validation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'v1.28.0'
      
      - name: Validate Kubernetes manifests
        run: |
          kubectl --dry-run=client --validate=true apply -f kubernetes/base/ || true
          kubectl --dry-run=client --validate=true apply -f infrastructure/crossplane/ -R || true

  helm-lint:
    name: Helm Charts Validation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Helm
        uses: azure/setup-helm@v4
        with:
          version: '3.13.0'
      
      - name: Lint Helm Charts
        run: |
          for chart in helm/charts/*/; do
            if [ -f "$chart/Chart.yaml" ]; then
              helm lint "$chart"
            fi
          done

  crossplane-validation:
    name: Crossplane Resources Validation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Crossplane CLI
        run: |
          curl -sL https://raw.githubusercontent.com/crossplane/crossplane/master/install.sh | sh
          sudo mv kubectl-crossplane /usr/local/bin
      
      - name: Validate Crossplane Resources
        run: |
          # Validate XRDs and Compositions
          find infrastructure/crossplane/compositions -name "*.yaml" -exec kubectl --dry-run=client --validate=true apply -f {} \; || true

  backstage-validation:
    name: Backstage Configuration Validation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Validate Backstage templates
        run: |
          # Install yq for YAML validation
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq
          
          # Validate template YAML files
          find backstage/templates -name "*.yaml" -exec yq eval . {} \; > /dev/null

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [security-scan, terraform-check, kubernetes-validation, helm-lint, crossplane-validation]
    if: github.ref == 'refs/heads/develop'
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0
      
      - name: Deploy Infrastructure
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          cd infrastructure/terraform/environments/dev
          terraform init
          terraform plan
          terraform apply -auto-approve

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [security-scan, terraform-check, kubernetes-validation, helm-lint, crossplane-validation]
    if: github.ref == 'refs/heads/main'
    environment: staging
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to Staging
        run: |
          echo "Deploying to staging environment..."
          # Add staging deployment logic here

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to Production
        run: |
          echo "Deploying to production environment..."
          # Add production deployment logic here
