apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: microservice-template
  title: Microservice Application
  description: Create a new microservice with all platform integrations
  tags:
    - recommended
    - microservice
    - kubernetes
    - crossplane
spec:
  owner: platform-team
  type: service
  
  parameters:
    - title: Basic Information
      required:
        - name
        - description
      properties:
        name:
          title: Name
          type: string
          description: Unique name of the service
          pattern: '^[a-z0-9-]+$'
          ui:autofocus: true
          ui:help: 'Use lowercase letters, numbers, and hyphens only'
        description:
          title: Description
          type: string
          description: Help others understand what this service does
        owner:
          title: Owner
          type: string
          description: Owner of the component
          ui:field: OwnerPicker
          ui:options:
            catalogFilter:
              kind: Group
    
    - title: Technology Stack
      required:
        - language
        - framework
      properties:
        language:
          title: Programming Language
          type: string
          description: Which programming language do you want to use?
          default: nodejs
          enum:
            - nodejs
            - python
            - java
            - go
            - dotnet
          enumNames:
            - Node.js
            - Python
            - Java
            - Go
            - .NET
        framework:
          title: Framework
          type: string
          description: Which framework do you want to use?
          default: express
          enum:
            - express
            - fastify
            - flask
            - django
            - spring-boot
            - gin
            - aspnet-core
          enumNames:
            - Express (Node.js)
            - Fastify (Node.js)
            - Flask (Python)
            - Django (Python)
            - Spring Boot (Java)
            - Gin (Go)
            - ASP.NET Core (.NET)
    
    - title: Infrastructure Configuration
      required:
        - environment
        - replicas
      properties:
        environment:
          title: Environment
          type: string
          description: Which environment to deploy to initially?
          default: dev
          enum:
            - dev
            - staging
            - prod
          enumNames:
            - Development
            - Staging
            - Production
        replicas:
          title: Number of Replicas
          type: integer
          description: How many instances of your service should run?
          default: 2
          minimum: 1
          maximum: 10
        database:
          title: Database Required
          type: boolean
          description: Does your service need a database?
          default: false
        databaseType:
          title: Database Type
          type: string
          description: Which database do you want to use?
          default: postgresql
          enum:
            - postgresql
            - mysql
            - mongodb
          enumNames:
            - PostgreSQL
            - MySQL
            - MongoDB
          dependencies:
            database:
              const: true
        resources:
          title: Resource Requirements
          type: object
          properties:
            cpu:
              title: CPU Request
              type: string
              default: 100m
              description: CPU request (e.g., 100m, 500m, 1)
            memory:
              title: Memory Request
              type: string
              default: 128Mi
              description: Memory request (e.g., 128Mi, 512Mi, 1Gi)
    
    - title: Repository Information
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com
              - gitlab.com

  steps:
    - id: fetch
      name: Fetch Base Template
      action: fetch:template
      input:
        url: ./skeleton
        values:
          name: ${{ parameters.name }}
          description: ${{ parameters.description }}
          owner: ${{ parameters.owner }}
          language: ${{ parameters.language }}
          framework: ${{ parameters.framework }}
          environment: ${{ parameters.environment }}
          replicas: ${{ parameters.replicas }}
          database: ${{ parameters.database }}
          databaseType: ${{ parameters.databaseType }}
          resources: ${{ parameters.resources }}
          destination: ${{ parameters.repoUrl | parseRepoUrl }}

    - id: publish
      name: Publish to GitHub
      action: publish:github
      input:
        allowedHosts: ['github.com']
        description: ${{ parameters.description }}
        repoUrl: ${{ parameters.repoUrl }}
        defaultBranch: main
        gitCommitMessage: 'Initial commit from Backstage'
        gitAuthorName: 'Platform Team'
        gitAuthorEmail: 'platform-team@company.com'

    - id: createCrossplaneResource
      name: Create Crossplane Application Resource
      action: http:backstage:request
      input:
        method: POST
        path: '/api/kubernetes/services/crossplane-system/applications'
        body:
          apiVersion: platform.io/v1alpha1
          kind: Application
          metadata:
            name: ${{ parameters.name }}
            namespace: ${{ parameters.destination.owner }}-${{ parameters.environment }}
          spec:
            parameters:
              name: ${{ parameters.name }}
              environment: ${{ parameters.environment }}
              replicas: ${{ parameters.replicas }}
              resources:
                cpu: ${{ parameters.resources.cpu }}
                memory: ${{ parameters.resources.memory }}
              database:
                enabled: ${{ parameters.database }}
                engine: ${{ parameters.databaseType }}

    - id: createArgoCDApp
      name: Create ArgoCD Application
      action: http:backstage:request
      input:
        method: POST
        path: '/api/argocd/applications'
        body:
          apiVersion: argoproj.io/v1alpha1
          kind: Application
          metadata:
            name: ${{ parameters.name }}
            namespace: argocd
          spec:
            project: platform
            source:
              repoURL: ${{ parameters.repoUrl }}
              targetRevision: HEAD
              path: k8s/overlays/${{ parameters.environment }}
            destination:
              server: https://kubernetes.default.svc
              namespace: ${{ parameters.destination.owner }}-${{ parameters.environment }}
            syncPolicy:
              automated:
                prune: true
                selfHeal: true
              syncOptions:
                - CreateNamespace=true

    - id: register
      name: Register in Software Catalog
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
        catalogInfoPath: '/catalog-info.yaml'

  output:
    links:
      - title: Repository
        url: ${{ steps.publish.output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps.register.output.entityRef }}
      - title: View in ArgoCD
        url: https://argocd.platform.local/applications/${{ parameters.name }}
      - title: Crossplane Resource
        url: https://platform.local/crossplane/applications/${{ parameters.name }}
